name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: quantlink/qross

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [validator, api, networking, ml]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/ -n qross
        kubectl rollout restart deployment/qross-validator -n qross
        kubectl rollout restart deployment/qross-api -n qross
        kubectl rollout restart deployment/qross-networking -n qross
        kubectl rollout restart deployment/qross-ml -n qross
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/qross-validator -n qross --timeout=300s
        kubectl rollout status deployment/qross-api -n qross --timeout=300s
        kubectl rollout status deployment/qross-networking -n qross --timeout=300s
        kubectl rollout status deployment/qross-ml -n qross --timeout=300s

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Deploy to production
      run: |
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/ -n qross
        kubectl set image deployment/qross-validator validator=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-validator:${{ github.ref_name }} -n qross
        kubectl set image deployment/qross-api api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ github.ref_name }} -n qross
        kubectl set image deployment/qross-networking networking=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-networking:${{ github.ref_name }} -n qross
        kubectl set image deployment/qross-ml ml=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml:${{ github.ref_name }} -n qross
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/qross-validator -n qross --timeout=600s
        kubectl rollout status deployment/qross-api -n qross --timeout=600s
        kubectl rollout status deployment/qross-networking -n qross --timeout=600s
        kubectl rollout status deployment/qross-ml -n qross --timeout=600s
    
    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://qross-api-service.qross.svc.cluster.local:4000/health
